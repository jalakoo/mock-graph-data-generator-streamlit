
# Generated by CodiumAI
from graph_data_generator import Generator, GeneratorType
from graph_data_generator_streamlit.tabs.design_tab import filtered_generators


import pytest

@pytest.fixture
def test_different_generators():
    return  {
            "string_generator": Generator(name="String Generator", description="description1", type=GeneratorType.STRING, code=None, args=None, tags=None),
            "bool_generator": Generator(name="Bool Generator", description="description2", type=GeneratorType.BOOL, code=None, args=None, tags=None),
            "datetime_generator": Generator(name="Datetime Generator", description="description3", type=GeneratorType.DATETIME,code=None, args=None, tags=None),
            "float_generator": Generator(name="Float Generator", description="description3", type=GeneratorType.FLOAT,code=None, args=None, tags=None)
        }

class TestCodeUnderTest:

    # Tests that the function returns a list of generators when the search term is empty and the type filter is set to "All"
    def test_empty_search_term_and_type_filter_all(self, test_different_generators):
        # Arrange
        search_term = ""
        type_filter = "All"
        generators = test_different_generators
    
        # Act
        result = filtered_generators(search_term, type_filter, generators)
    
        # Assert
        assert len(result) == 4
        assert all(generator in result for generator in generators.values())

    def test_non_search_term_and_type_filter_all(self, test_different_generators):
        # Arrange
        search_term = None
        type_filter = "All"
        generators = test_different_generators
    
        # Act
        result = filtered_generators(search_term, type_filter, generators)
    
        # Assert
        assert len(result) == 4
        assert all(generator in result for generator in generators.values())

    # # Tests that the function returns a list of generators when the search term is non-empty and a specific type filter is set
    def test_non_empty_search_term_and_specific_type_filter(self, test_different_generators):
        # Arrange
        search_term = ""
        type_filter = GeneratorType.STRING.to_string()
        generators = test_different_generators
    
        # Act
        result = filtered_generators(search_term, type_filter, generators)
    
        # Assert
        assert len(result) == 1, f'Expected 1 generator but got {len(result)}'
        assert result[0] == generators["string_generator"]

    # # Tests that the function returns an empty list when the search term does not match any generator and the type filter is set to "All"
    # def test_non_matching_search_term_and_type_filter_all(self):
    #     # Arrange
    #     search_term = "non_matching"
    #     type_filter = "All"
    #     generators = {
    #         "generator1": Generator(name="generator1", description="description1", type=GeneratorType.TYPE1),
    #         "generator2": Generator(name="generator2", description="description2", type=GeneratorType.TYPE2),
    #         "generator3": Generator(name="generator3", description="description3", type=GeneratorType.TYPE3)
    #     }
    
    #     # Act
    #     result = filtered_generators(search_term, type_filter, generators)
    
    #     # Assert
    #     assert len(result) == 0

    # # Tests that the function returns an empty list when the search term does not match any generator and a specific type filter is set
    # def test_non_matching_search_term_and_specific_type_filter(self):
    #     # Arrange
    #     search_term = "non_matching"
    #     type_filter = GeneratorType.TYPE2.to_string()
    #     generators = {
    #         "generator1": Generator(name="generator1", description="description1", type=GeneratorType.TYPE1),
    #         "generator2": Generator(name="generator2", description="description2", type=GeneratorType.TYPE2),
    #         "generator3": Generator(name="generator3", description="description3", type=GeneratorType.TYPE3)
    #     }
    
    #     # Act
    #     result = filtered_generators(search_term, type_filter, generators)
    
    #     # Assert
    #     assert len(result) == 0

    # # Tests that the function returns an empty list when the generators dictionary is empty
    # def test_empty_generators_dictionary(self):
    #     # Arrange
    #     search_term = "generator"
    #     type_filter = "All"
    #     generators = {}
    
    #     # Act
    #     result = filtered_generators(search_term, type_filter, generators)
    
    #     # Assert
    #     assert len(result) == 0