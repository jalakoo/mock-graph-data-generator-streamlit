{
    "05711cac": {
        "args": [],
        "code_url": "mock_generators/generators/05711cac.py",
        "description": "Random URI with Faker library.",
        "name": "URL",
        "type": "String",
        "tags":["uri", "url"]
    },
    "05add148": {
        "args": [
            {
                "default": "",
                "label": "Optional Domain (ie: company.com)",
                "type": "String"
            }
        ],
        "code_url": "mock_generators/generators/05add148.py",
        "description": "Random email with Faker library.",
        "name": "Email",
        "type": "String",
        "tags":["email"]
    },
    "111d38e0": {
        "args": [
            {
                "default": "",
                "label": "List of float (ie: 1.0, 2.2, 3.3)",
                "type": "String"
            }
        ],
        "code_url": "mock_generators/generators/111d38e0.py",
        "description": "Randomly selected float from a comma-seperated list of options.",
        "name": "Float from list",
        "type": "Float",
        "tags":["float", "list"]
    },
    "338d576e": {
        "args": [
            {
                "default": 1,
                "label": "Minimum Number",
                "type": "Int"
            },
            {
                "default": 10,
                "label": "Maximum Number",
                "type": "Int"
            }
        ],
        "code_url": "mock_generators/generators/338d576e.py",
        "description": "String generator using the lorem-text package",
        "name": "Paragraphs",
        "type": "String",
        "tags":["string", "lorem", "ipsum", "paragraph", "paragraphs"]
    },
    "469b37c7": {
        "args": [
            {
                "default": 1,
                "label": "Min",
                "type": "Int"
            },
            {
                "default": 10,
                "label": "Max",
                "type": "Int"
            }
        ],
        "code_url": "mock_generators/generators/469b37c7.py",
        "description": "Random integer from a min and max value argument. Argument values are inclusive.",
        "name": "Int",
        "type": "Int",
        "tags":["int", "integer","number","num","count"]
    },
    "470ff56f": {
        "args": [],
        "code_url": "mock_generators/generators/470ff56f.py",
        "description": "Country name generator using the Faker library.",
        "name": "Country",
        "type": "String",
        "tags":["country","from"]
    },
    "57f2df99": {
        "args": [
            {
                "default": 50,
                "label": "Percent chance of true (out of 100)",
                "type": "Int"
            }
        ],
        "code_url": "mock_generators/generators/57f2df99.py",
        "description": "Bool generator using the Faker library.",
        "name": "Bool",
        "type": "Bool",
        "tags":["bool", "boolean"]
    },
    "58e9ddbb": {
        "args": [],
        "code_url": "mock_generators/generators/58e9ddbb.py",
        "description": "First name generator using the Faker library",
        "name": "First Name",
        "type": "String",
        "tags": ["first","name"]
    },
    "5929c11b": {
        "args": [],
        "code_url": "mock_generators/generators/5929c11b.py",
        "description": "Last name generator using the Faker library.",
        "name": "Last Name",
        "type": "String",
        "tags":["last","name"]
    },
    "5bf1fbd6": {
        "args": [
            {
                "default": "",
                "label": "List of words (ie: alpha, brave, charlie)",
                "type": "String"
            }
        ],
        "code_url": "mock_generators/generators/5bf1fbd6.py",
        "description": "Randomly selected string from a comma-seperated list of options.",
        "name": "String from list",
        "type": "String",
        "tags":["string", "list","word", "words","status","type"]
    },
    "5e30c30b": {
        "args": [],
        "code_url": "mock_generators/generators/5e30c30b.py",
        "description": "Company name generator using the Faker library.",
        "name": "Company Name",
        "type": "String",
        "tags":["company","name"]
    },
    "78bc0765": {
        "args": [
            {
                "default": 37,
                "label": "Limit character length",
                "type": "Int"
            }
        ],
        "code_url": "mock_generators/generators/78bc0765.py",
        "description": "Random UUID 4 hash using Faker library. 37 Characters Max.",
        "name": "UUID",
        "type": "String",
        "tags":["uuid", "hash","unique","uid"]
    },
    "92eeddbb": {
        "args": [],
        "code_url": "mock_generators/generators/92eeddbb.py",
        "description": "City name generator using the Faker library.",
        "name": "City",
        "type": "String",
        "tags":["city","name"]
    },
    "ab64469b": {
        "args": [
            {
                "default": "1970-01-01",
                "label": "Oldest Date",
                "type": "Datetime"
            },
            {
                "default": "2022-11-24",
                "label": "Newest Date",
                "type": "Datetime"
            }
        ],
        "code_url": "mock_generators/generators/ab64469b.py",
        "description": "Generate a random date between 2 specified dates. Exclusive of days specified.",
        "name": "Date",
        "type": "Datetime",
        "tags":["date","datetime","created","updated","at"]
    },
    "c9a071b5": {
        "args": [],
        "code_url": "mock_generators/generators/c9a071b5.py",
        "description": "Technobabble words all lower-cased. Faker Library",
        "name": "Technical BS Phrase",
        "type": "String",
        "tags":["phrase","phrases","technical","jargon","task","description"]
    },
    "d1ebdc1a": {
        "args": [],
        "code_url": "mock_generators/generators/d1ebdc1a.py",
        "description": "Phrase with first letter capitalized. Faker Library",
        "name": "Catch Phrase",
        "type": "String",
        "tags":["phrase","phrases","catch","project","description"]
    },
    "e0eb78b0": {
        "args": [
            {
                "default": 33,
                "label": "Limit Character Length",
                "type": "Int"
            }
        ],
        "code_url": "mock_generators/generators/e0eb78b0.py",
        "description": "Random MD5 hash using Faker library. 33 Characters max",
        "name": "MD5",
        "type": "String",
        "tags":["md5", "hash","unique"]
    },
    "e56d87a3": {
        "args": [
            {
                "default": "",
                "label": "List of integers (ie: 1, 2, 3)",
                "type": "String"
            }
        ],
        "code_url": "mock_generators/generators/e56d87a3.py",
        "description": "Randomly selected int from a comma-seperated list of options. If no list provided, will return 0",
        "name": "Int from list",
        "type": "Int",
        "tags":["int", "integer","number","num","count","list","salary","cost"]
    },
    "e8cff8c1": {
        "args": [
            {
                "default": 0.0,
                "label": "Min",
                "type": "Float"
            },
            {
                "default": 1.0,
                "label": "Max",
                "type": "Float"
            },
            {
                "default": 2,
                "label": "Decimal Places",
                "type": "Int"
            }
        ],
        "code_url": "mock_generators/generators/e8cff8c1.py",
        "description": "Random float between a range. Inclusive.",
        "name": "Float",
        "type": "Float",
        "tags":["float", "decimal","number","num","count","cost","price"]
    },
    "id1": {
        "args": [
            {
                "default": 1,
                "label": "Minimum Number",
                "type": "Int"
            },
            {
                "default": 10,
                "label": "Maximum Number",
                "type": "Int"
            }
        ],
        "code_url": "mock_generators/generators/loremtext_words.py",
        "description": "String generator using the lorem-text package",
        "name": "Words",
        "type": "String",
        "tags":["words","lorem","text","description"]
    },
    "id2": {
        "args": [
            {
                "default": 1,
                "label": "Minimum Number",
                "type": "Int"
            },
            {
                "default": 10,
                "label": "Maximum Number",
                "type": "Int"
            }
        ],
        "code_url": "mock_generators/generators/loremtext_sentence.py",
        "description": "String generator using the lorem-text package",
        "name": "Sentences",
        "type": "String",
        "tags":["sentence","sentences","lorem","text","description"]
    }
}