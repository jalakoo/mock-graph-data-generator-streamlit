{
    "README":{
        "content": "This is the default list of all generators used by the app. If you add new generators they will be added to this file. The default_generators.json file contains a copy of this from the repo maintainer(s)"
    },
    "address_usa": {
        "args": [],
        "code_url": "mock_generators/generators/address_usa.py",
        "description": "Random Address using the random-address package.",
        "name": "Address USA",
        "tags": [
            "address",
            "location"
        ],
        "type": "String"
    },
    "street": {
        "args": [],
        "code_url": "mock_generators/generators/street.py",
        "description": "Random Street Address using the Faker library.",
        "name": "Street",
        "tags": [
            "address",
            "street"
        ],
        "type": "String"
    },
    "postcode": {
        "args": [],
        "code_url": "mock_generators/generators/postcode.py",
        "description": "Random Postal Code using the Faker library.",
        "name": "Postcode",
        "tags": [
            "address",
            "street"
        ],
        "type": "String"
    },
    "uri": {
        "args": [],
        "code_url": "mock_generators/generators/05711cac.py",
        "description": "Random URI with Faker library.",
        "name": "URL",
        "tags": [
            "uri",
            "url"
        ],
        "type": "String"
    },
    "email": {
        "args": [
            {
                "default": "",
                "label": "Optional Domain (ie: company.com)",
                "type": "String"
            }
        ],
        "code_url": "mock_generators/generators/05add148.py",
        "description": "Random email with Faker library.",
        "name": "Email",
        "tags": [
            "email"
        ],
        "type": "String"
    },
    "float": {
        "args": [
            {
                "default": 1.0,
                "label": "Value",
                "type": "Float"
            }
        ],
        "code_url": "mock_generators/generators/float.py",
        "description": "Constant Float value",
        "name": "Float",
        "tags": [
            "float",
            "number"
        ],
        "type": "Float"
    },
    "float_from_list": {
        "args": [
            {
                "default": "",
                "label": "List of float (ie: 1.0, 2.2, 3.3)",
                "type": "String"
            }
        ],
        "code_url": "mock_generators/generators/float_from_list.py",
        "description": "Randomly selected float from a comma-seperated list of options.",
        "name": "Float from list",
        "tags": [
            "float",
            "list"
        ],
        "type": "Float"
    },
    "lorem_paragraphs": {
        "args": [
            {
                "default": 1,
                "label": "Minimum Number",
                "type": "Integer"
            },
            {
                "default": 10,
                "label": "Maximum Number",
                "type": "Integer"
            }
        ],
        "code_url": "mock_generators/generators/338d576e.py",
        "description": "String generator using the lorem-text package",
        "name": "Paragraphs",
        "tags": [
            "string",
            "lorem",
            "ipsum",
            "paragraph",
            "paragraphs"
        ],
        "type": "String"
    },
    "int_range": {
        "args": [
            {
                "default": 1,
                "label": "Min",
                "type": "Integer"
            },
            {
                "default": 10,
                "label": "Max",
                "type": "Integer"
            }
        ],
        "code_url": "mock_generators/generators/int_range.py",
        "description": "Random integer from a min and max value argument. Argument values are inclusive.",
        "name": "Int Range",
        "tags": [
            "int",
            "integer",
            "number",
            "num",
            "count"
        ],
        "type": "Integer"
    },
    "country": {
        "args": [],
        "code_url": "mock_generators/generators/country.py",
        "description": "Country name generator using the Faker library.",
        "name": "Country",
        "tags": [
            "country",
            "from"
        ],
        "type": "String"
    },
    "pure_random": {
        "args": [],
        "code_url": "mock_generators/generators/pure_random.py",
        "description": "Randomly assigns to a target node. Duplicates and orphan nodes possible.",
        "name": "Pure Random",
        "tags": [
            "random"
        ],
        "type": "Assignment"
    },
    "bool": {
        "args": [
            {
                "default": 50,
                "label": "Percent chance of true (out of 100)",
                "type": "Integer"
            }
        ],
        "code_url": "mock_generators/generators/bool.py",
        "description": "Bool generator using the Faker library.",
        "name": "Bool",
        "tags": [
            "bool",
            "boolean"
        ],
        "type": "Bool"
    },
    "first_name": {
        "args": [],
        "code_url": "mock_generators/generators/58e9ddbb.py",
        "description": "First name generator using the Faker library",
        "name": "First Name",
        "tags": [
            "first",
            "name"
        ],
        "type": "String"
    },
    "last_name": {
        "args": [],
        "code_url": "mock_generators/generators/5929c11b.py",
        "description": "Last name generator using the Faker library.",
        "name": "Last Name",
        "tags": [
            "last",
            "name"
        ],
        "type": "String"
    },
    "string": {
        "args": [
            {
                "default": "",
                "label": "List of words (ie: alpha, brave, charlie)",
                "type": "String"
            }
        ],
        "code_url": "mock_generators/generators/literal.py",
        "description": "String literal",
        "name": "String",
        "tags": [
            "string",
            "word"
        ],
        "type": "String"
    },
    "string_from_list": {
        "args": [
            {
                "default": "",
                "label": "List of words (ie: alpha, brave, charlie)",
                "type": "String"
            }
        ],
        "code_url": "mock_generators/generators/string_from_list.py",
        "description": "Randomly selected string from a comma-seperated list of options.",
        "name": "String from list",
        "tags": [
            "string",
            "list",
            "word",
            "words",
            "status",
            "type"
        ],
        "type": "String"
    },
    "company_name": {
        "args": [],
        "code_url": "mock_generators/generators/5e30c30b.py",
        "description": "Company name generator using the Faker library.",
        "name": "Company Name",
        "tags": [
            "company",
            "name"
        ],
        "type": "String"
    },
    "exhaustive_random": {
        "args": [],
        "code_url": "mock_generators/generators/exhaustive_random.py",
        "description": "Assigns each source node to a random target node, until target node records are exhausted. No duplicates, no orphan to nodes.",
        "name": "Exhaustive Random",
        "tags": [
            "exhaustive"
        ],
        "type": "Assignment"
    },
    "uuid": {
        "args": [
        ],
        "code_url": "mock_generators/generators/uuid.py",
        "description": "UUID4 Generator",
        "name": "UUID",
        "tags": [
            "uuid",
            "hash",
            "unique",
            "uid"
        ],
        "type": "String"
    },
    "short_uuid": {
        "args": [
            {
                "default": 37,
                "label": "Limit character length",
                "type": "Integer"
            }
        ],
        "code_url": "mock_generators/generators/short_uuid.py",
        "description": "Random UUID 4 hash using Faker library. 37 Characters Max.",
        "name": "Short UUID",
        "tags": [
            "uid",
            "hash",
            "unique",
            "short"
        ],
        "type": "String"
    },
    "city": {
        "args": [],
        "code_url": "mock_generators/generators/city.py",
        "description": "City name generator using the Faker library.",
        "name": "City",
        "tags": [
            "city",
            "name"
        ],
        "type": "String"
    },
    "state": {
        "args": [],
        "code_url": "mock_generators/generators/state.py",
        "description": "Random US state code",
        "name": "State",
        "tags": [
            "state",
            "state code",
            "US",
            "name"
        ],
        "type": "String"
    },
    "date": {
        "args": [
            {
                "default": "1970-01-01",
                "label": "Oldest Date",
                "type": "Datetime"
            },
            {
                "default": "2022-11-24",
                "label": "Newest Date",
                "type": "Datetime"
            }
        ],
        "code_url": "mock_generators/generators/date.py",
        "description": "Generate a random date between 2 specified dates. Exclusive of days specified.",
        "name": "Date",
        "tags": [
            "date",
            "datetime",
            "created",
            "updated",
            "at"
        ],
        "type": "Datetime"
    },
    "technical_phrase": {
        "args": [],
        "code_url": "mock_generators/generators/c9a071b5.py",
        "description": "Technobabble words all lower-cased. Faker Library",
        "name": "Technical BS Phrase",
        "tags": [
            "phrase",
            "phrases",
            "technical",
            "jargon",
            "task",
            "description"
        ],
        "type": "String"
    },
    "catch_phrase": {
        "args": [],
        "code_url": "mock_generators/generators/d1ebdc1a.py",
        "description": "Phrase with first letter capitalized. Faker Library",
        "name": "Catch Phrase",
        "tags": [
            "phrase",
            "phrases",
            "catch",
            "project",
            "description"
        ],
        "type": "String"
    },
    "string_from_csv": {
        "args": [
            {
                "default": "",
                "label": "CSV Filepath",
                "type": "String",
                "hint": "http://some.website.com/tech_companies.csv",
                "description":""
            },
            {
                "default": "",
                "label": "Header Column Field",
                "type": "String",
                "hint": "Name",
                "description":""
            }
        ],
        "code_url": "mock_generators/generators/string_from_csv.py",
        "description": "Random string row value from a  csv file located at a given url. Be certain field contains string values.",
        "name": "String from CSV",
        "tags": [
            "csv",
            "string"
        ],
        "type": "String"
    },
    "md5": {
        "args": [
            {
                "default": 33,
                "label": "Limit Character Length",
                "type": "Integer"
            }
        ],
        "code_url": "mock_generators/generators/e0eb78b0.py",
        "description": "Random MD5 hash using Faker library. 33 Characters max",
        "name": "MD5",
        "tags": [
            "md5",
            "hash",
            "unique"
        ],
        "type": "String"
    },
    "int_from_list": {
        "args": [
            {
                "default": "",
                "label": "List of integers (ie: 1, 2, 3)",
                "type": "String"
            }
        ],
        "code_url": "mock_generators/generators/int_from_list.py",
        "description": "Randomly selected int from a comma-seperated list of options. If no list provided, will return 0",
        "name": "Int from list",
        "tags": [
            "int",
            "integer",
            "number",
            "num",
            "count",
            "list",
            "salary",
            "cost"
        ],
        "type": "Integer"
    },
    "float_range": {
        "args": [
            {
                "default": 0.0,
                "label": "Min",
                "type": "Float"
            },
            {
                "default": 1.0,
                "label": "Max",
                "type": "Float"
            },
            {
                "default": 2,
                "label": "Decimal Places",
                "type": "Integer"
            }
        ],
        "code_url": "mock_generators/generators/float_range.py",
        "description": "Random float between a range. Inclusive.",
        "name": "Float Range",
        "tags": [
            "float",
            "decimal",
            "number",
            "num",
            "count",
            "cost",
            "price"
        ],
        "type": "Float"
    },
    "int": {
        "args": [
            {
                "default": 1,
                "label": "Value",
                "type": "Integer"
            }
        ],
        "code_url": "mock_generators/generators/int.py",
        "description": "Constant integer value",
        "name": "Int",
        "tags": [
            "int",
            "integer",
            "num",
            "number",
            "count"
        ],
        "type": "Integer"
    },
        "image_url":{
            "args": [
                {
                    "default": 400,
                    "label": "Image Width",
                    "type": "Integer"
                },
                {
                    "default": 200,
                    "label": "Image Height",
                    "type": "Integer"
                }
            ],
            "code_url": "mock_generators/generators/image_url.py",
            "description": "Random image url generator using Lorem Picsum",
            "name": "Image URL",
            "tags": [
                "image",
                "lorem",
                "images",
                "url",
                "link"
            ],
            "type": "String"
    },
    "lorem_words": {
        "args": [
            {
                "default": 1,
                "label": "Minimum Number",
                "type": "Integer"
            },
            {
                "default": 10,
                "label": "Maximum Number",
                "type": "Integer"
            }
        ],
        "code_url": "mock_generators/generators/lorem_words.py",
        "description": "String generator using the lorem-text package",
        "name": "Words",
        "tags": [
            "words",
            "lorem",
            "text",
            "description"
        ],
        "type": "String"
    },
    "lorem_sentences": {
        "args": [
            {
                "default": 1,
                "label": "Minimum Number",
                "type": "Integer"
            },
            {
                "default": 10,
                "label": "Maximum Number",
                "type": "Integer"
            }
        ],
        "code_url": "mock_generators/generators/lorem_sentences.py",
        "description": "String generator using the lorem-text package",
        "name": "Sentences",
        "tags": [
            "sentence",
            "sentences",
            "lorem",
            "text",
            "description"
        ],
        "type": "String"
    }
}